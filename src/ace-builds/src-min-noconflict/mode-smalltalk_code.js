ace.define("ace/mode/matching_brace_outdent",[],function(e,t,n){"use strict";var r=e("../range").Range,i=function(){};(function(){this.checkOutdent=function(e,t){return/^\s+$/.test(e)?/^\s*\}/.test(t):!1},this.autoOutdent=function(e,t){var n=e.getLine(t),i=n.match(/^(\s*\})/);if(!i)return 0;var s=i[1].length,o=e.findMatchingBracket({row:t,column:s});if(!o||o.row==t)return 0;var u=this.$getIndent(e.getLine(o.row));e.replace(new r(t,0,t,s-1),u)},this.$getIndent=function(e){return e.match(/^\s*/)[0]}}).call(i.prototype),t.MatchingBraceOutdent=i}),ace.define("ace/mode/smalltalk_code_highlight_rules",[],function(e,t,n){"use strict";var r=e("../lib/oop"),i=e("./text_highlight_rules").TextHighlightRules,s=/(\+|\=|\\|\*|\~|\<|\>|\=|\||\/|\&|\@|\%|\,|\?|\!)+/,o=/([A-Z][a-zA-Z0-9_]+)|([A-Z])/,u=/([a-zA-Z_][a-zA-Z0-9_]+)|([a-zA-Z])/,a=/(([a-zA-Z_]\:)|([a-zA-Z_][a-zA-Z0-9_]+\:))+/,f=/(\-\s*)?\d+(\.\d+)?([dDeEfFpPqQsS]\-?\d)?/,l=/\d+(\#|r)\-?[0-9A-Za-z]+/,c=/(true|false|nil|_remoteNil)\b/,h={token:"comment",start:/\"/},p={token:"space",regex:/\s+/},d=[p,{token:"Pragma.end",regex:/\>/,next:"pop"},{token:"invalid.PragmaEnd",regex:/[^\>]./}],v={token:"Pragma.number.numeric",regex:f,next:"pragmaPairOptional"},m={token:"Pragma.number.radixed",regex:l,next:"pragmaPairOptional"},g={token:"Pragma.StringLiteral",regex:/(\')((\'\')|([^\']))+(\')/,next:"pragmaPairOptional"},y={token:"Pragma.CharacterLiteral",regex:/\$./,next:"pragmaPairOptional"},b={token:"Pragma.SymbolStart",regex:/\#/,next:"pragmaSymbol"},w=[{token:"Pragma.Symbol.Keyword",regex:a,next:"pragmaPairOptional"},{token:"Pragma.Symbol.Identifier",regex:u,next:"pragmaPairOptional"},{token:"Pragma.Symbol.BinarySelector",regex:s,next:"pragmaPairOptional"},{token:"Pragma.Symbol.String",regex:/(\')((\'\')|([^\']))+(\')/,next:"pragmaPairOptional"},{token:"invalid",regex:/./,next:"start"}],E={token:"Pragma.SpecialLiteral",regex:c,next:"pragmaPairOptional"},S=[p,m,v,g,y,b,E],x=[p,{token:"invalid.KeywordPragma",regex:/primitive\:/,next:"pragmaEnd"},{token:"KeywordPragma",regex:a,next:"pragmaLiteral"},{token:"Pragma.BinarySelector",regex:/(\+|\=|\\|\*|\~|\<|\=|\||\/|\&|\@|\%|\,|\?|\!)+/,next:"pragmaLiteral"}],T=x.concat(d),E={token:"PragmaSpecialLiteral",regex:c,next:"pragmaEnd"},N=[{token:"invalid.UnaryPragmaIdentifier",regex:/(protected|unprotected|requiresVc)\b/,next:"pragmaEnd"},{token:"UnaryPragma",regex:u,next:"pragmaEnd"}],C=[E].concat(N),k=x.concat(C),L={token:"Pragma.start",regex:/\</,push:"pragmaBody"},A={token:"keyword.operator.startTemporaries",regex:/\|/,next:"temporaries"},O=[p,{token:"keyword.operator.endTemporaries",regex:/\|/,next:"statements"},{token:"variable.other.temporary",regex:u},{token:"invalid",regex:/^\s/,next:"statements"}],M={token:["variable","space","keyword.operator.assignment"],regex:/([a-zA-Z])(\s*)(\:\=)/,next:"statement"},_={token:["variable","space","keyword.operator.assignment"],regex:/([a-zA-Z_][a-zA-Z0-9_]+)(\s*)(\:\=)/,next:"statement"},D={token:"keyword.operator.return",regex:/\^/,next:"statement"},P=[p,{token:"constant.numeric.radixed",regex:l,merge:!1},{token:"constant.numeric",regex:f,merge:!1},{token:"constant.character",regex:/\$./},{token:"string.quoted",start:/\'/},{token:"string.other.symbol",regex:/\#\'((\'\')|([^\']))*\'/},{token:"string.other.symbol",regex:/\#/,push:[{token:"string.other.symbol",regex:a,next:"pop"},{token:"string.other.symbol",regex:u,next:"pop"},{token:"string.other.symbol",regex:s,next:"pop"},{token:"invalid",regex:/.+/,next:"primary"}]}],H=[{token:"constant.language",regex:/true|false|nil|_remoteNil/},{token:"constant.array.start",regex:/\#(?:\()/,push:P.concat([{token:"constant.array.end",regex:/(?:\))/,next:"pop"},{token:"invalid",regex:/.+/,next:"primary"}])},{token:"keyword.operator.byteArray.begin",regex:/\#\[/,push:[p,{token:"keyword.operator.byteArray.end",regex:/(?:\])/,next:"pop"},{token:"constant.numeric.byte",regex:l},{token:"constant.numeric.byte",regex:f},{token:"invalid",regex:/.+/,next:"primary"}]}].concat(P),B=[].concat(H),j=[].concat(B),F=[].concat([M,_],j),D={token:"return",regex:/\^/},I=[].concat([p,h,L,D],F),q=[].concat([p,h,L,A],I),R=function(){this.$rules={start:q,expression:j,methodBody:q,pragmaBody:k,pragmaEnd:d,pragmaLiteral:S,pragmaLiteralNumberRadixed:m,pragmaPairOptional:T,pragmaSymbol:w,primary:B,statement:F,statements:I,temporaries:O},this.normalizeRules()};R.metaData=r.inherits(R,i),t.SmalltalkCodeHighlightRules=R}),ace.define("ace/mode/folding/smalltalk_code",[],function(e,t,n){"use strict";var r=e("../../lib/oop"),i=e("../../range").Range,s=e("./fold_mode").FoldMode,o=t.FoldMode=function(){};r.inherits(o,s),function(){this.foldingStartMarker=/(\{|\[)[^\}\]]*$|^\s*(\/\*)/,this.foldingStopMarker=/^[^\[\{]*(\}|\])|^[\s\*]*(\*\/)/,this.getFoldWidgetRange=function(e,t,n){var r=e.getLine(n)}}.call(o.prototype)}),ace.define("ace/mode/smalltalk_code",[],function(e,t,n){"use strict";var r=e("../lib/oop"),i=e("./text").Mode,s=e("../tokenizer").Tokenizer,o=e("./matching_brace_outdent").MatchingBraceOutdent,u=e("./smalltalk_code_highlight_rules").SmalltalkCodeHighlightRules,a=e("./folding/smalltalk_code").FoldMode,f=function(){this.HighlightRules=u,this.$outdent=new o,this.foldingRules=new a};r.inherits(f,i),function(){this.$id="ace/mode/smalltalk_code",this.blockComment={start:'"',end:'""'},this.getNextLineIndent=function(e,t,n){var r=this.$getIndent(t);return r},this.checkOutdent=function(e,t,n){return this.$outdent.checkOutdent(t,n)},this.autoOutdent=function(e,t,n){this.$outdent.autoOutdent(t,n)}}.call(f.prototype),t.Mode=f});                (function() {
                    ace.require(["ace/mode/smalltalk_code"], function(m) {
                        if (typeof module == "object" && typeof exports == "object" && module) {
                            module.exports = m;
                        }
                    });
                })();
            